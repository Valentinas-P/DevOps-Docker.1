-----------------------------------------------------------------------------------------------------
----------------------------  Kubernetes - 2024 ------------------------------------
-----------------------------------------------------------------------------------------------------

What is kubernetes? ¬ Kubernetes makes decisions about where and how containerised applications are launched on a server, when to scale up or down the number of applications
                      replicas, and what to do when an application or server stops working. And it's an open source project.

-----------------------------------------------------------------------------------------------------
---------------------------- Kubernetes and the Cloud-Native Ecosystem ------------------------------
-----------------------------------------------------------------------------------------------------

What's containers in kubernetes? ¬ A technology that bundles the code for an application, and the configuration required to run the code itself, in one unit.
Container Advantages ¬
                      1. Portable - Run on any Linux, Windows, or macOS machine
                      2. Uses less CPUs and memory, saving money
                      3. Self-contained, can be spun up or down in seconds
                      4. Create replications and scale up or down the replications

What is cloud-native? ¬ Cloud-native technologies are open-source projects designed to let technologists use cloud computing services to automatically deploy and scale applications.
Kubernetes allows to run multiple replicas of applications, and if one application stops working at least others are accepting traffic/data.

[---------- Commands for kubernetes ----------
kubectl get pods -A ¬ This will show every pods in every name space. These pods are how containers are run in Kubernetes and the Kubernetes itself.
kubectl get services -A ¬ This command will show how the services are running in the cluster. It acts as load balancers within the cluster.
---------------------------------------------------]

-----------------------------------------------------------------------------------------------------
---------------------------- Application Deployment -------------------------------------------------
-----------------------------------------------------------------------------------------------------

[---------- Reading & Writing YAML ----------
What is YAML? ¬ It's a serialisation language, used for configuration files.

Basic commands for YAML and explanation: ----
# ¬ It means a start of the comment and its ignored by the computer
--- ¬ Means the start of the document
name: ¬ It means it a start of the key ['name' it has to have in the end ':' symbol.
name: Kim Sci ¬ It means it starts with the key ['name'] and ends with the value ['Kim Sci']
courses: ---> this is the name of the list that has 2 sequences inside.
    - Learning Kub ---> This is sequence and sequence can have a list as it shows in this example.
    - Kubernetes Packagae --> This is the second sequence of the list.
Example of using two lists:
jobs:
  A: 1.25
  B: 2.5
  C: 3.1
  titles:
    - D
    - E
    - F
explanation --->:
YAML allows you to have a list inside another list which it shown above this text of how it should be written in the .yaml or .yml file extension.
---------------------------------------------------]
[---------- Create a namespace ----------
kubectl apply -f /path/to/your/file/file.yaml ---> This will create a new namespace if the file.yaml has a correct format of YAML.
kubectl delete -f /path/to/your/file/file.yaml ---> This will delete a file called file.yaml, from the list of namespaces that exist in the docker.
---------------------------------------------------]
[---------- Deploy an application ----------
commands to start:
kubectl get ns ¬ This will show your namespaces of docker
kubectl apply -f deployment.yaml ---> This will deploy a file of a namespace to the docker where in the file it has been setup to deploy an application with other import info, e.g. containers, etc.
kubectl get deployments -n development ---> This command will confirm all the deployments in the development namespace.
kubectl get pods -n developments ---> This command will show all the pods that are running for the development namespace.
kubectl delete pod [name of the pod] -n [name of namespace] ---> This command will delete a pod that is in a specific namespace is running. e.g. [kubectl delete pod pod-info-deployment-3435435sfd-kkaas -n development]
---------------------------------------------------]
[---------- Checking health of the pod by checking logs ---------
kubectl describe pod [name of the pod] -n development ---> This command will show you if the pod is healthy or of it have some errors and how fix it. e.g. [kubectl describe pod pod-info-deployment-34543643-234gf -n development]
----------------------------------------------------------------]
[---------- Checking if your application is working ---------
kubectl get pods -n development -o wide ---> This command is used to check the available and running pods and the second part '-o wide' allows us to see extra info about the pod.
kubectl exec -it [name of the pod] -- /bin/sh ---> This command will run the kubectl exec, next -it means want to get access to the pod's name, and '/bin/sh' used for specifying what shell it will use.
          inside the container some commands:
          [To check if its working properly write this 'wget' and see if any wget commands pop-up.]
          wget [IP_ADDRESS:YourSELECTEDPORTFROMCONTAINER] this will get the IP address of the pod and store it in a file called index.html, to check you can write cat index.html.
          exit ---> This command will exit the container
----------------------------------------------------------------]
[---------- View your application logs -------------------------
steps:
    1. kubectl get pods [name of the pod] -n development ---> Copy the pod name that you want to check the application log of it
    2. kubectl logs [name of the pod] -n development ---> This command allows you to check if the application pod is healthy and running or if it have issues.
---------------------------------------------------------------]

-------------------------------------------------------------------------------------------------
---------------------------- Complex Application Deployment -------------------------------------
-------------------------------------------------------------------------------------------------

[---------- Expose your application to the internet with a LoadBalancer ---------
What is kubernetes service? ¬ A Kubernetes service is a load balancer that directs traffic (data) from the internet to Kubernetes pods. A load balancer service has a public and static IP address. -->
Address IP is a public IP that can change, and service IP needs to remain the same.

Example of exposing your loadBalancer to the internet:
kubectl apply -f service.yaml ---> This command will deploy services.yaml on the container
kubectl get services -n development ---> This command will retrieve the services from 'development' namespace
  open new tab terminal:
    minikubes tunnel ---> This command is used to run Kubernetes clusters locally for development and testing purposes. --->
                          minikube tunnel command creates a network route to expose LoadBalancer services.
--------------------------------------------------------------------------------]
[---------- Add resource requests and limits to your pod ---------
Rule: It's important to avoid outages of pods, which can lead to failing of running applications.
    To make sure it doesn't happen it's important to apply at services in resources section: Limits and Requests.
        Example: In this example we ask kubernetes only to run pods that are min 150m of CPU and 85k (kilobytes) and max of 200m and 150k (kilobytes) of memory. --->
                 With this example it will stop the outages of pods.

                Resources:
                  Requests:
                    CPU: 200m
                    memory: 150k
                  Limits:
                    CPU: 150m
                    memory: 85k
-----------------------------------------------------------------]

[---------- Delete your Kubernetes objects and tear down your cluster --
kubectl delete -f [name of the pod] ---> This command will delete the current running pod.
minikube delete ---> This command will delete the current running cluster from docker.
-----------------------------------------------------------------------]

-----------------------------------------------------------------------------------------------------
---------------------------- Kubernetes Architecture ------------------------------------------------
-----------------------------------------------------------------------------------------------------

[---------- The Kubernetes control plane ---------------
An instance of Kubernetes is called a cluster, each cluster has a control plane and at least one worker node.
The purpose of Kubernetes is ¬ It overlooks the clusters (kubernetes) and makes sure nodes and pods are created, modified and deleted without any issues.
  Kubernetes cluster diagram ----->
      1. Most important is 'Kube API Server' component. ---> The API server exposes the Kubernetes API.
                                                    - Pods, deployments, and the horizontal pod autoscaled have API endpoints.
                                                    - Kubernetes API has a REST interface.
                                                    - Kubernetes cluster cannot exist without Kube API Server.
                                                    - kubectl and kubeadm are CLI tools to communicate with the Kubernetes API via HTTP requests.
                                                        command to check all the Kubernetes objects and their API version: ---> kubectl api-resources
      2. 'etcd' is an open-source component, and mostly available ---> it saves all data about the state of the cluster
                                                    - Only the Kube API server can communicate directly with 'etcd'.
                                                    - etcd also run as a pod and you can look at the logs
                                                        command to check the log: ---> kubectl logs etcd-minikube -n kube-system | jq .
      3. kube scheduler ---> which identifies newly created pods, that have not been assigned a worker node, and then chooses a node for the pod to run on.
                                                    - kube scheduler is run as a pod.
                                                    - run the logs to check how the pod works.
      4. kube controller manager ---> Is a loop that run continually and checks the status of the cluster.
                                                    - Checks all worker nodes are up and running.
                                                    - Removes the broken node and replace it with a new worker node.
      5. cloud controller manager ---> It allows to connect your cluster with a cloud provider's API, so it allows us to use cloud resources, e.g. AWS, GCP, Azure or any other public cloud.

Most Kubernetes clusters run with a minimum of 3 working nodes.
    - The worker nodes are where pods are scheduled and run
    - each worker node has 3 components.
        1. kubelet ---> - An component that runs on every worker node.
                        - This component makes sure that containers are in a pod are running and healthy.
                        - This component communicates directly with the API-server. And looking for newly assigned pods.
        2. Container Runtime
                        - A kublet assigned to new pod starts a container using Container Runtime Interface (CRI)
                        - CRI enables the Kublet to create containers with the engines:
                              - Containerd
                              - CRI-O
                              - Kata Containers
                              - AWS Firecracker
        3. Kube-proxy 
                        - Makes sure pods and services can communicate
                        - Each Kube-proxy communicates directly with the Kube-apiserver
-------------------------------------------------------]

-----------------------------------------------------------------------------------------------------
---------------------------- Advanced Topics --------------------------------------------------------
-----------------------------------------------------------------------------------------------------

[---------- Ways to manage Kubernetes pods -------

-------------------------------------------------]
